Author : Kevin S. Brown (kevin.s.brown@uconn.edu, github.com/thelahunginjeet), Ann M. Hermundstad

A python package for construction and simulation of dynamical networks, including embedding in physical space (i.e., making
the edge weights correspond to some kind of physical distance).  Current support is only for pulse-coupled oscillators.
This package relies heavily on the networkx python package for graph representation and manipulation.

All source code is made available under the BSD-3 license.

You should run the tests via distutils:

>>python setup.py test

(These will certainly fail without networkx installation.  Otherwise they should be fine.)

See the documentation in the modules for detailed usage and function arguments.

Example usage:

>>from pydynet import network
>>import numpy as np

# create a network; different topologies need different numbers of parameters;
#   the example ring here needs only one
>>net = network.PulseOscillatorNetwork(10,'ring')
# other examples:
#     net = network.PulseOscillatorNetwork(10,'ER',0.2)
#     net = network.PulseOscillatorNetwork(10,'BA',3)
#     net = network.PulseOscillatorNetwork(10,'WS',3,0.2)

# if you want to change default delays, eps, or nodal embedding do so here
#   default is delta = 0, eps = 1/(Nnodes - 1), embed = unitcirc_map
# net.eps = 0.1
# net.delta = 1.0
# net.embed.null_map()

>>p = np.array([1,2])
>>y0 = np.zeros(len(net))
>>y = net.euler_integrate(p,y0,100,M=10000,fullout=False,stopatsync=False)
